# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'potato.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QLabel, QFileDialog
from PyQt5 import uic
import sys
import numpy as np
import pandas as pd
import cv2
import os
import matplotlib.pyplot as plt
import tensorflow as tf

from keras.utils import to_categorical
from keras_preprocessing.image import load_img, img_to_array, ImageDataGenerator
from sklearn.metrics import classification_report, log_loss, accuracy_score
from sklearn.model_selection import train_test_split

directory = u"resourcespotato"

Name=[]
for file in os.listdir(directory):
    Name+=[file]
#print(Name)
#print(len(Name))




class Ui_PotatoWindow(object):
    def setupUi(self, PotatoWindow):
        PotatoWindow.setObjectName("PotatoWindow")
        PotatoWindow.resize(458, 532)
        self.centralwidget = QtWidgets.QWidget(PotatoWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btnOpenFilePotato = QtWidgets.QPushButton(self.centralwidget)
        self.btnOpenFilePotato.setGeometry(QtCore.QRect(20, 10, 93, 28))
        self.btnOpenFilePotato.setObjectName("btnOpenFilePotato")
        self.btnOpenFilePotato.clicked.connect(self.bukapotato)
        self.containerIMG1 = QtWidgets.QLabel(self.centralwidget)
        self.containerIMG1.setGeometry(QtCore.QRect(20, 50, 200, 200))
        self.containerIMG1.setText("")
        self.containerIMG1.setPixmap(QtGui.QPixmap(""))
        self.containerIMG1.setScaledContents(True)
        self.containerIMG1.setObjectName("containerIMG1")
        self.containerIMG2 = QtWidgets.QLabel(self.centralwidget)
        self.containerIMG2.setGeometry(QtCore.QRect(240, 50, 200, 200))
        self.containerIMG2.setText("")
        self.containerIMG2.setPixmap(QtGui.QPixmap(""))
        self.containerIMG2.setScaledContents(True)
        self.containerIMG2.setObjectName("containerIMG2")
        self.labelhasilpotato = QtWidgets.QLabel(self.centralwidget)
        self.labelhasilpotato.setGeometry(QtCore.QRect(20, 260, 91, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.labelhasilpotato.setFont(font)
        self.labelhasilpotato.setObjectName("labelhasilpotato")
        self.btnDeteksiPotato = QtWidgets.QPushButton(self.centralwidget)
        self.btnDeteksiPotato.setGeometry(QtCore.QRect(120, 10, 93, 28))
        self.btnDeteksiPotato.setObjectName("btnDeteksiPotato")
        self.btnDeteksiPotato.clicked.connect(self.periksakentang)
        self.hasilPotatoField = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.hasilPotatoField.setGeometry(QtCore.QRect(20, 290, 421, 191))
        self.hasilPotatoField.setFrameShape(QtWidgets.QFrame.Box)
        self.hasilPotatoField.setReadOnly(True)
        self.hasilPotatoField.setObjectName("hasilPotatoField")
        PotatoWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(PotatoWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 458, 26))
        self.menubar.setObjectName("menubar")
        PotatoWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(PotatoWindow)
        self.statusbar.setObjectName("statusbar")
        PotatoWindow.setStatusBar(self.statusbar)

        self.retranslateUi(PotatoWindow)
        QtCore.QMetaObject.connectSlotsByName(PotatoWindow)

    def retranslateUi(self, PotatoWindow):
        _translate = QtCore.QCoreApplication.translate
        PotatoWindow.setWindowTitle(_translate("PotatoWindow", "Potato"))
        self.btnOpenFilePotato.setText(_translate("PotatoWindow", "Buka"))
        self.labelhasilpotato.setText(_translate("PotatoWindow", "Hasil:"))
        self.btnDeteksiPotato.setText(_translate("PotatoWindow", "Deteksi"))

    def bukapotato(self):
        #self.label.setText("You clicked a button")
        #ketika tombol buka ditekan akan muncul file opendialog
        #deklarasikan variabel dulu untuk menampung string dir gambar. Nama variabel nya fname
        global fname
        fname, _ = QFileDialog.getOpenFileName()
        if fname:
            #variabel fname dipanggil untuk menampilkan gambar pilihan user di image container pertama
            self.containerIMG1.setPixmap(QtGui.QPixmap(fname))

    def periksakentang(self):
        #ketika tombol deteksi ditekan, maka inilah yg akan terjadi
        #image container 2 berubah, demikian juga dgn kolom hasil dibawah
        self.hasilPotatoField.setPlainText("\n"+"============")


        N=[]
        for i in range(len(Name)):
            N+=[i]
            
        normal_mapping=dict(zip(Name,N)) 
        reverse_mapping=dict(zip(N,Name)) 

        def mapper(value):
            return reverse_mapping[value]

        
        dataset=[]
        testset=[]
        count=0
        for name in Name:
            path=os.path.join(directory,name)
            t=0
            for im in os.listdir(path):
                if im[-4:]=='.jpg':
                    image=load_img(os.path.join(path,im), grayscale=False, color_mode='rgb', target_size=(100,100))
                    image=img_to_array(image)
                    image=image/255.0
                    if t<60:
                        dataset.append([image,count])
                    else:   
                        testset.append([image,count])
                    t+=1
            count=count+1

        data,labels0=zip(*dataset)
        test,tlabels0=zip(*testset)

        labels1=to_categorical(labels0)
        data=np.array(data)
        labels=np.array(labels1)

        tlabels1=to_categorical(tlabels0)
        test=np.array(test)
        tlabels=np.array(tlabels1)

        # print(len(labels))
        # print(len(tlabels))

        trainx,testx,trainy,testy=train_test_split(data,labels,test_size=0.2,random_state=44)

        # print(trainx.shape)
        # print(testx.shape)
        # print(trainy.shape)
        # print(testy.shape)

        datagen = ImageDataGenerator(horizontal_flip=True,vertical_flip=True,rotation_range=20,zoom_range=0.2,
                                width_shift_range=0.2,height_shift_range=0.2,shear_range=0.1,fill_mode="nearest")

        pretrained_model3 = tf.keras.applications.DenseNet201(input_shape=(100,100,3),include_top=False,weights='imagenet',pooling='avg')
        pretrained_model3.trainable = False

        inputs3 = pretrained_model3.input
        x3 = tf.keras.layers.Dense(128, activation='relu')(pretrained_model3.output)
        outputs3 = tf.keras.layers.Dense(3, activation='softmax')(x3)
        model = tf.keras.Model(inputs=inputs3, outputs=outputs3)

        model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

        his=model.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=20)

        image=load_img(str(fname),target_size=(100,100))
        image=img_to_array(image) 
        image=image/255.0
        prediction_image=np.array(image)
        prediction_image= np.expand_dims(image, axis=0)
        prediction=model.predict(prediction_image)
        value=np.argmax(prediction)
        move_name=mapper(value)
        #print(prediction)
        #print(value)

        if move_name == "Early Blight":
            # print("Prediction is {}.".format(move_name))
            self.hasilPotatoField.setPlainText("{}".format(move_name)+"\n"+"============"+"\n"+"\n"
        "Early Blight adalah salah satu penyakit tomat dan kentang yang paling umum, terjadi hampir setiap musim. Ini mempengaruhi daun, buah dan batang dan dapat sangat membatasi hasil ketika kultivar tomat yang rentan digunakan dan cuaca mendukung. Defoliasi yang parah dapat terjadi.")
        if move_name == "Healthy":
            # print("Prediction is {}.".format(move_name))
            self.hasilPotatoField.setPlainText("{}".format(move_name)+"\n"+"============"+"\n"+"\n"
        "Tanaman anda sehat")
        if move_name == "Late Blight":
            # print("Prediction is {}.".format(move_name))
            self.hasilPotatoField.setPlainText("{}".format(move_name)+"\n"+"============"+"\n"+"\n"
        "Late Blight, juga disebut hawar kentang, penyakit tanaman kentang dan tomat yang disebabkan oleh jamur air Phytophthora infestans. Penyakit ini terjadi di daerah lembab dengan suhu berkisar antara 4 dan 29 °C (40 dan 80 °F).")
        #self.containerIMG2.setPixmap(QtGui.QPixmap(u"Example Pictures/potato.jpg"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    PotatoWindow = QtWidgets.QMainWindow()
    ui = Ui_PotatoWindow()
    ui.setupUi(PotatoWindow)
    PotatoWindow.show()
    sys.exit(app.exec_())

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'padi.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from asyncore import read
import cmd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QLabel, QFileDialog
from PyQt5 import uic
import sys
import cv2
import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
import tensorflow as tf
import sys


from keras.utils import to_categorical
from keras_preprocessing.image import load_img, img_to_array, ImageDataGenerator
from sklearn.metrics import classification_report, log_loss, accuracy_score
from sklearn.model_selection import train_test_split

directory = u"resources"

Name=[]
for file in os.listdir(directory):
    Name+=[file]
#print(Name)
#print(len(Name))

N=[]
for i in range(len(Name)):
    N+=[i]
    
normal_mapping=dict(zip(Name,N)) 
reverse_mapping=dict(zip(N,Name)) 


def mapper(value):
    return reverse_mapping[value]



class Ui_PadiWindow(object):
    def setupUi(self, PadiWindow):
        PadiWindow.setObjectName("PadiWindow")
        PadiWindow.resize(458, 532)
        self.centralwidget = QtWidgets.QWidget(PadiWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btnOpenFilePadi = QtWidgets.QPushButton(self.centralwidget)
        self.btnOpenFilePadi.setGeometry(QtCore.QRect(20, 10, 93, 28))
        self.btnOpenFilePadi.setObjectName("btnOpenFilePadi")
        self.btnOpenFilePadi.clicked.connect(self.bukapadi)
        self.containerIMG1 = QtWidgets.QLabel(self.centralwidget)
        self.containerIMG1.setGeometry(QtCore.QRect(20, 50, 200, 200))
        self.containerIMG1.setText("")
        self.containerIMG1.setPixmap(QtGui.QPixmap(""))
        self.containerIMG1.setScaledContents(True)
        self.containerIMG1.setObjectName("containerIMG1")
        self.containerIMG2 = QtWidgets.QLabel(self.centralwidget)
        self.containerIMG2.setGeometry(QtCore.QRect(240, 50, 200, 200))
        self.containerIMG2.setText("")
        self.containerIMG2.setPixmap(QtGui.QPixmap(""))
        self.containerIMG2.setScaledContents(True)
        self.containerIMG2.setObjectName("containerIMG2")
        self.labelhasilpadi = QtWidgets.QLabel(self.centralwidget)
        self.labelhasilpadi.setGeometry(QtCore.QRect(20, 260, 91, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.labelhasilpadi.setFont(font)
        self.labelhasilpadi.setObjectName("labelhasilpadi")
        self.btnDeteksiPadi = QtWidgets.QPushButton(self.centralwidget)
        self.btnDeteksiPadi.setGeometry(QtCore.QRect(120, 10, 93, 28))
        self.btnDeteksiPadi.setObjectName("btnDeteksiPadi")
        self.btnDeteksiPadi.clicked.connect(self.periksapadi)
        self.hasilPadiField = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.hasilPadiField.setGeometry(QtCore.QRect(20, 290, 421, 191))
        self.hasilPadiField.setFrameShape(QtWidgets.QFrame.Box)
        self.hasilPadiField.setReadOnly(True)
        self.hasilPadiField.setObjectName("hasilPadiField")
        PadiWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(PadiWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 458, 26))
        self.menubar.setObjectName("menubar")
        PadiWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(PadiWindow)
        self.statusbar.setObjectName("statusbar")
        PadiWindow.setStatusBar(self.statusbar)

        self.retranslateUi(PadiWindow)
        QtCore.QMetaObject.connectSlotsByName(PadiWindow)




    def retranslateUi(self, PadiWindow):
        _translate = QtCore.QCoreApplication.translate
        PadiWindow.setWindowTitle(_translate("PadiWindow", "Padi"))
        self.btnOpenFilePadi.setText(_translate("PadiWindow", "Buka"))
        self.labelhasilpadi.setText(_translate("PadiWindow", "Hasil:"))
        self.btnDeteksiPadi.setText(_translate("PadiWindow", "Deteksi"))

    def bukapadi(self):
        #self.label.setText("You clicked a button")
        #ketika tombol buka ditekan akan muncul file opendialog
        #deklarasikan variabel dulu untuk menampung string dir gambar. Nama variabel nya fname
        global fname
        fname, _ = QFileDialog.getOpenFileName()
        if fname:
            #variabel fname dipanggil untuk menampilkan gambar pilihan user di image container pertama
            self.containerIMG1.setPixmap(QtGui.QPixmap(fname))      



        

    
    def periksapadi(self):
        #ketika tombol deteksi ditekan, maka inilah yg akan terjadi
        #image container 2 berubah, demikian juga dgn kolom hasil dibawah

        # self.hasilPadiField.setPlainText("\n"+"Processing Image ============"+"\n")

        self.hasilPadiField.clear()
        

        print("Processing===============")
       

        
        dataset=[]
        testset=[]
        count=0
        for name in Name:
            path=os.path.join(directory,name)
            t=0
            for im in os.listdir(path):
                if im[-4:]=='.jpg':
                    image=load_img(os.path.join(path,im), grayscale=False, color_mode='rgb', target_size=(100,100))
                    image=img_to_array(image)
                    image=image/255.0
                    if t<60:
                        dataset.append([image,count])
                    else:   
                        testset.append([image,count])
                    t+=1
            count=count+1

        data,labels0=zip(*dataset)
        test,tlabels0=zip(*testset)

        labels1=to_categorical(labels0)
        data=np.array(data)
        labels=np.array(labels1)

        tlabels1=to_categorical(tlabels0)
        test=np.array(test)
        tlabels=np.array(tlabels1)

        trainx,testx,trainy,testy=train_test_split(data,labels,test_size=0.2,random_state=44)

        datagen = ImageDataGenerator(horizontal_flip=True,vertical_flip=True,rotation_range=20,zoom_range=0.2,
                                width_shift_range=0.2,height_shift_range=0.2,shear_range=0.1,fill_mode="nearest")

        pretrained_model3 = tf.keras.applications.DenseNet201(input_shape=(100,100,3),include_top=False,weights='imagenet',pooling='avg')
        pretrained_model3.trainable = False

        inputs3 = pretrained_model3.input
        x3 = tf.keras.layers.Dense(128, activation='relu')(pretrained_model3.output)
        outputs3 = tf.keras.layers.Dense(3, activation='softmax')(x3)
        model = tf.keras.Model(inputs=inputs3, outputs=outputs3)

        model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

        his=model.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=20)

        image=load_img(str(fname),target_size=(100,100))
        image=img_to_array(image) 
        image=image/255.0
        prediction_image=np.array(image)
        prediction_image= np.expand_dims(image, axis=0)
        prediction=model.predict(prediction_image)
        value=np.argmax(prediction)
        move_name=mapper(value)
        #print(prediction)
        #print(value)
        #print("Prediction is {}.".format(move_name))
        # self.hasilPadiField.setPlainText("{}".format(move_name))
        #self.containerIMG2.setPixmap(QtGui.QPixmap(u"Example Pictures/padi.jpg"))
        if move_name == "blast":
            # print("Prediction is {}.".format(move_name))
            self.hasilPadiField.setPlainText("{}".format(move_name)+"\n"+"============"+"\n"+"\n"
        "Penyakit blas merupakan pemyakit yang disebabkan oleh jamur pylicularia grisea. Jamur ini dapat menginfeksi pada semua fase pertumbuhan tanaman padi, mulai dari fase pembibitan sampai pada fase generatif.")
        if move_name == "Blight":
            # print("Prediction is {}.".format(move_name))
            self.hasilPadiField.setPlainText("{}".format(move_name)+"\n"+"============"+"\n"+"\n"
        "Penyakit Bacterial Leaf Blight (BLB) merupakan salah satu penyakit yang berbahaya bagi tanaman padi. Penyakit ini bisa menyerang di setiap fase pertumbuhan.")
        if move_name == "tungro":
            # print("Prediction is {}.".format(move_name))
            self.hasilPadiField.setPlainText("{}".format(move_name)+"\n"+"============"+"\n"+"\n"
        "Penyakit tungro merupakan penyakit padi yang disebabkan oleh dua jenis virus yaitu virus yang berbentuk batang atau virus batang tungro padi Rice tungro bacilliform virus (RTBV), dan virus berbentuk bulat atau virus bulat tungro padi Rice tungro spherical virus (RTSV). Kedua virus tersebut ditularkan oleh beberapa spesies wereng hijau dan wereng daun lainnya.")
        #self.containerIMG2.setPixmap(QtGui.QPixmap(u"Example Pictures/potato.jpg"))
        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    PadiWindow = QtWidgets.QMainWindow()
    ui = Ui_PadiWindow()
    ui.setupUi(PadiWindow)
    PadiWindow.show()
    sys.exit(app.exec_())
